// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  admins      Admin[]
  invitations Invitation[]
  campaigns   Campaign[]
}

model Admin {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  password       String?  // Hashed password
  companyId      String
  isActive       Boolean  @default(true)
  lastLogin      DateTime?
  // lastAssessment DateTime? // TODO: Add after migration is applied
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  company        Company  @relation(fields: [companyId], references: [id])
  invitations    Invitation[]
}

model Invitation {
  id              String   @id @default(cuid())
  email           String
  name            String?
  inviteCode      String   @unique
  inviteUrl       String
  status          InvitationStatus @default(PENDING)
  personalMessage String?
  companyId       String
  adminId         String?
  createdAt       DateTime @default(now())
  sentAt          DateTime?
  openedAt        DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  resentAt        DateTime?
  currentStage    String?
  
  company         Company  @relation(fields: [companyId], references: [id])
  admin           Admin?   @relation(fields: [adminId], references: [id])
  metadata        InvitationMetadata?
  assessmentResults AssessmentResult[]
  
  @@index([email])
  @@index([companyId])
  @@index([status])
}

model InvitationMetadata {
  id              String   @id @default(cuid())
  invitationId    String   @unique
  role            String?
  challenges      String[] @default([])
  toolsAccessed   String[] @default([])
  accountCreated  Boolean  @default(false)
  accountEmail    String?
  isGenericLink   Boolean  @default(false)
  
  invitation      Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
}

model AssessmentResult {
  id              String   @id @default(cuid())
  invitationId    String
  toolId          String   // e.g., "purpose-coach", "values-explorer", etc.
  toolName        String   // Display name of the tool
  
  // Core assessment data
  responses       Json     // Raw responses from the assessment
  scores          Json?    // Calculated scores/metrics
  summary         String?  @db.Text // AI-generated summary
  insights        Json?    // Detailed insights and analysis
  recommendations Json?    // Action items and recommendations
  
  // User profile data (from the assessment)
  userProfile     Json?    // Name, role, challenges, etc.
  
  // Completion tracking
  completedAt     DateTime @default(now())
  shareId         String?  @unique // For sharing results
  
  // PDF data if generated
  pdfUrl          String?
  pdfGeneratedAt  DateTime?
  
  // Relations
  invitation      Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  
  @@index([invitationId])
  @@index([toolId])
  @@index([shareId])
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  companyId   String
  status      CampaignStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id])
}

enum InvitationStatus {
  PENDING
  SENT
  OPENED
  STARTED
  COMPLETED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}